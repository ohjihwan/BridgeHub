================================================================================
                    BridgeHub Java Backend Server API 명세서
================================================================================

📋 기본 정보
- 서버 URL: http://localhost:7100
- API Base URL: http://localhost:7100/api
- Content-Type: application/json
- 인증 방식: JWT Bearer Token

📝 응답 형식
모든 API는 다음과 같은 통일된 응답 형식을 사용합니다:

성공 응답:
{
    "status": "success",
    "data": { ... },
    "errorCode": null
}

에러 응답:
{
    "status": "error",
    "data": null,
    "errorCode": "ERROR_CODE"
}

🔐 인증 헤더
Authorization: Bearer {JWT_TOKEN}

================================================================================
1. 인증 관련 API (/api/auth)
================================================================================

1.1 이메일 인증 코드 발송
POST /api/auth/send-verification
Content-Type: application/json

Request Body:
{
    "email": "user@example.com"
}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

Response (Error):
{
    "status": "error",
    "data": null,
    "errorCode": "EMAIL_REQUIRED"
}

1.2 이메일 인증 확인
POST /api/auth/verify-email
Content-Type: application/json

Request Body:
{
    "email": "user@example.com",
    "code": "123456"
}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

Response (Error):
{
    "status": "error",
    "data": null,
    "errorCode": "VERIFICATION_FAILED"
}

1.3 회원가입
POST /api/auth/register
Content-Type: application/json

📝 필수 필드 (반드시 입력해야 함):
- userid: 이메일 형태의 아이디
- password: 비밀번호  
- name: 실명
- nickname: 닉네임

📝 선택 필드 (입력하지 않으면 기본값 설정):
- phone: 전화번호 (기본값: "")
- education: 학력 (기본값: "미입력")
- department: 학과/전공 (기본값: "미입력")
- gender: 성별 (기본값: "미입력")
- region: 지역 (기본값: "미입력")
- district: 구/군 (기본값: "미입력")
- time: 선호 시간대 (기본값: "미입력")
- profileImage: 프로필 이미지 (기본값: "")

Request Body (최소 필수 정보만):
{
    "userid": "user@example.com",
    "password": "password123",
    "name": "홍길동",
    "nickname": "길동이"
}

Request Body (모든 정보 입력):
{
    "userid": "user@example.com",
    "phone": "010-1234-5678",
    "nickname": "사용자닉네임",
    "name": "홍길동",
    "password": "password123",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "gender": "남성",
    "region": "서울",
    "district": "강남구",
    "time": "오전",
    "profileImage": "profile.jpg",
    "emailVerified": true
}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

Response (Error - 필수 필드 누락):
{
    "status": "error",
    "data": null,
    "errorCode": "이메일은 필수 입력 항목입니다."
}

Response (Error - 기타):
{
    "status": "error",
    "data": null,
    "errorCode": "REGISTRATION_ERROR"
}

1.4 로그인
POST /api/auth/login
Content-Type: application/json

Request Body:
{
    "username": "user@example.com",
    "password": "password123"
}

Response (Success):
{
    "status": "success",
    "data": {
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
        "username": "user@example.com",
        "email": "user@example.com",
        "emailVerified": true
    },
    "errorCode": null
}

Response (Error):
{
    "status": "error",
    "data": null,
    "errorCode": "LOGIN_FAILED"
}

1.5 이메일 인증 상태 확인
GET /api/auth/verify-email?email=user@example.com

Response (Success):
{
    "status": "success",
    "data": true,
    "errorCode": null
}

1.6 관리자 권한 체크
GET /api/auth/check-admin
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": false,
    "errorCode": null
}

1.7 관리자 계정 생성 (개발용)
POST /api/auth/create-admin
Content-Type: application/json

Request Body:
{
    "userid": "admin@example.com",
    "password": "admin123",
    "name": "관리자",
    "nickname": "관리자",
    "emailVerified": true
}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

================================================================================
2. 회원 관리 API (/api/members)
================================================================================

2.1 회원 정보 조회
GET /api/members/{username}
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": {
        "id": 1,
        "userid": "user@example.com",
        "phone": "010-1234-5678",
        "nickname": "사용자닉네임",
        "name": "홍길동",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "gender": "남성",
        "region": "서울",
        "district": "강남구",
        "time": "오전",
        "profileImage": "profile.jpg",
        "status": "ACTIVE",
        "emailVerified": true,
        "createdAt": "2024-01-01T00:00:00",
        "updatedAt": "2024-01-01T00:00:00"
    },
    "errorCode": null
}

2.2 회원 정보 수정
PUT /api/members/{username}
Authorization: Bearer {JWT_TOKEN}
Content-Type: application/json

📝 수정 가능한 필드 (부분 업데이트 지원):
- password: 비밀번호 (입력된 경우에만 변경)
- phone: 전화번호
- nickname: 닉네임 (빈 문자열 불가)
- name: 실명 (빈 문자열 불가)
- education: 학력
- department: 학과/전공
- gender: 성별
- region: 지역
- district: 구/군
- time: 선호 시간대
- profileImage: 프로필 이미지

Request Body (전체 정보 수정):
{
    "phone": "010-9876-5432",
    "nickname": "새닉네임",
    "name": "김철수",
    "password": "newpassword123",
    "education": "대학교",
    "department": "전자공학과",
    "gender": "남성",
    "region": "부산",
    "district": "해운대구",
    "time": "오후",
    "profileImage": "new_profile.jpg"
}

Request Body (부분 정보만 수정):
{
    "phone": "010-9876-5432",
    "department": "전자공학과",
    "region": "부산"
}

Request Body (비밀번호만 변경):
{
    "password": "newpassword123"
}

Response (Success):
{
    "status": "success",
    "data": {
        "id": 1,
        "userid": "user@example.com",
        "phone": "010-9876-5432",
        "nickname": "새닉네임",
        "name": "김철수",
        "education": "대학교",
        "department": "전자공학과",
        "gender": "남성",
        "region": "부산",
        "district": "해운대구",
        "time": "오후",
        "profileImage": "new_profile.jpg",
        "status": "ACTIVE",
        "emailVerified": true,
        "createdAt": "2024-01-01T00:00:00",
        "updatedAt": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

2.3 회원 탈퇴
DELETE /api/members/{username}
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

================================================================================
3. 스터디룸 관리 API (/api/studies)
================================================================================

3.1 스터디룸 목록 조회
GET /api/studies

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "roomId": 1,
            "bossId": 1,
            "title": "Java 스터디",
            "description": "Java 프로그래밍 스터디입니다.",
            "education": "대학교",
            "department": "컴퓨터공학과",
            "region": "서울",
            "district": "강남구",
            "capacity": 10,
            "currentMembers": 5,
            "time": "오후",
            "thumbnail": "java_study.jpg",
            "isPublic": true,
            "createdAt": "2024-01-01T00:00:00",
            "bossName": "홍길동",
            "bossNickname": "길동이",
            "bossProfileImage": "profile.jpg"
        }
    ],
    "errorCode": null
}

3.2 스터디룸 상세 조회
GET /api/studies/{studyRoomId}

Response (Success):
{
    "status": "success",
    "data": {
        "studyRoomId": 1,
        "roomId": 1,
        "bossId": 1,
        "title": "Java 스터디",
        "description": "Java 프로그래밍 스터디입니다.",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "region": "서울",
        "district": "강남구",
        "capacity": 10,
        "currentMembers": 5,
        "time": "오후",
        "thumbnail": "java_study.jpg",
        "isPublic": true,
        "createdAt": "2024-01-01T00:00:00",
        "bossName": "홍길동",
        "bossNickname": "길동이",
        "bossProfileImage": "profile.jpg"
    },
    "errorCode": null
}

3.3 스터디룸 생성
POST /api/studies
Authorization: Bearer {JWT_TOKEN}
Content-Type: application/json

Request Body:
{
    "title": "새로운 스터디",
    "description": "새로운 스터디룸입니다.",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "region": "서울",
    "district": "강남구",
    "capacity": 8,
    "time": "오후",
    "thumbnail": "study_thumbnail.jpg",
    "isPublic": true
}

Response (Success):
{
    "status": "success",
    "data": {
        "studyRoomId": 2,
        "roomId": 2,
        "bossId": 1,
        "title": "새로운 스터디",
        "description": "새로운 스터디룸입니다.",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "region": "서울",
        "district": "강남구",
        "capacity": 8,
        "currentMembers": 1,
        "time": "오후",
        "thumbnail": "study_thumbnail.jpg",
        "isPublic": true,
        "createdAt": "2024-01-01T12:00:00",
        "bossName": "홍길동",
        "bossNickname": "길동이",
        "bossProfileImage": "profile.jpg"
    },
    "errorCode": null
}

3.4 스터디룸 수정
PUT /api/studies/{studyRoomId}
Content-Type: application/json

Request Body:
{
    "title": "수정된 스터디",
    "description": "수정된 스터디룸입니다.",
    "education": "대학교",
    "department": "전자공학과",
    "region": "부산",
    "district": "해운대구",
    "capacity": 12,
    "time": "오전",
    "thumbnail": "updated_thumbnail.jpg",
    "isPublic": false
}

Response (Success):
{
    "status": "success",
    "data": {
        "studyRoomId": 1,
        "roomId": 1,
        "bossId": 1,
        "title": "수정된 스터디",
        "description": "수정된 스터디룸입니다.",
        "education": "대학교",
        "department": "전자공학과",
        "region": "부산",
        "district": "해운대구",
        "capacity": 12,
        "currentMembers": 5,
        "time": "오전",
        "thumbnail": "updated_thumbnail.jpg",
        "isPublic": false,
        "createdAt": "2024-01-01T00:00:00",
        "updatedAt": "2024-01-01T12:00:00",
        "bossName": "홍길동",
        "bossNickname": "길동이",
        "bossProfileImage": "profile.jpg"
    },
    "errorCode": null
}

3.5 스터디룸 삭제
DELETE /api/studies/{studyRoomId}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

3.6 스터디 참가 신청
POST /api/studies/{studyRoomId}/join
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

3.7 스터디 멤버 조회
GET /api/studies/{studyRoomId}/members

Response (Success):
{
    "status": "success",
    "data": [
        {
            "memberId": 1,
            "studyRoomId": 1,
            "memberName": "홍길동",
            "memberNickname": "길동이",
            "memberProfileImage": "profile.jpg",
            "status": "ACTIVE",
            "joinedAt": "2024-01-01T00:00:00",
            "isBoss": true
        },
        {
            "memberId": 2,
            "studyRoomId": 1,
            "memberName": "김철수",
            "memberNickname": "철수",
            "memberProfileImage": "profile2.jpg",
            "status": "PENDING",
            "joinedAt": "2024-01-01T01:00:00",
            "isBoss": false
        }
    ],
    "errorCode": null
}

3.8 참가 신청 승인/거절 (방장만)
PUT /api/studies/{studyRoomId}/members/{memberId}/status?status=APPROVED
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

3.9 대기중인 멤버 조회 (방장만)
GET /api/studies/{studyRoomId}/pending-members
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "memberId": 2,
            "studyRoomId": 1,
            "memberName": "김철수",
            "memberNickname": "철수",
            "memberProfileImage": "profile2.jpg",
            "status": "PENDING",
            "joinedAt": "2024-01-01T01:00:00",
            "isBoss": false
        }
    ],
    "errorCode": null
}

3.10 스터디 탈퇴
DELETE /api/studies/{studyRoomId}/leave
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

3.11 학과별 스터디룸 조회
GET /api/studies/department/{department}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "Java 스터디",
            "department": "컴퓨터공학과",
            "currentMembers": 5,
            "capacity": 10
        }
    ],
    "errorCode": null
}

3.12 지역별 스터디룸 조회
GET /api/studies/region/{region}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "Java 스터디",
            "region": "서울",
            "district": "강남구",
            "currentMembers": 5,
            "capacity": 10
        }
    ],
    "errorCode": null
}

3.13 시간대별 스터디룸 조회
GET /api/studies/time/{time}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "Java 스터디",
            "time": "오후",
            "currentMembers": 5,
            "capacity": 10
        }
    ],
    "errorCode": null
}

3.14 인기 스터디룸 조회
GET /api/studies/hot?limit=6

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "인기 Java 스터디",
            "currentMembers": 8,
            "capacity": 10,
            "createdAt": "2024-01-01T00:00:00"
        }
    ],
    "errorCode": null
}

3.15 내가 참여한 스터디룸 조회
GET /api/studies/my-studies
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "Java 스터디",
            "status": "ACTIVE",
            "joinedAt": "2024-01-01T00:00:00"
        }
    ],
    "errorCode": null
}

3.16 내가 생성한 스터디룸 조회
GET /api/studies/my-created
Authorization: Bearer {JWT_TOKEN}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "studyRoomId": 1,
            "title": "Java 스터디",
            "currentMembers": 5,
            "capacity": 10,
            "createdAt": "2024-01-01T00:00:00"
        }
    ],
    "errorCode": null
}

================================================================================
4. 파일 관리 API (/api/files)
================================================================================

4.1 파일 업로드
POST /api/files/upload
Content-Type: multipart/form-data

Form Data:
- file: [파일]
- studyRoomId: 1
- uploaderId: 1
- fileType: "IMAGE" (선택사항)

Response (Success):
{
    "status": "success",
    "data": {
        "fileId": 1,
        "originalFilename": "image.jpg",
        "storedFilename": "20240101_123456_image.jpg",
        "fileSize": 1024000,
        "fileType": "IMAGE",
        "mimeType": "image/jpeg",
        "uploadPath": "/uploads/20240101_123456_image.jpg",
        "studyRoomId": 1,
        "uploaderId": 1,
        "uploadedAt": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

4.2 파일 다운로드
GET /api/files/download/{fileId}

Response: 파일 바이너리 데이터

4.3 파일 정보 조회
GET /api/files/info/{fileId}

Response (Success):
{
    "status": "success",
    "data": {
        "fileId": 1,
        "originalFilename": "image.jpg",
        "storedFilename": "20240101_123456_image.jpg",
        "fileSize": 1024000,
        "fileType": "IMAGE",
        "mimeType": "image/jpeg",
        "uploadPath": "/uploads/20240101_123456_image.jpg",
        "studyRoomId": 1,
        "uploaderId": 1,
        "uploadedAt": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

4.4 메시지별 파일 목록 조회
GET /api/files/message/{messageId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "fileId": 1,
            "originalFilename": "image.jpg",
            "fileSize": 1024000,
            "fileType": "IMAGE"
        }
    ],
    "errorCode": null
}

4.5 스터디룸별 파일 목록 조회
GET /api/files/studyroom/{studyRoomId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "fileId": 1,
            "originalFilename": "image.jpg",
            "fileSize": 1024000,
            "fileType": "IMAGE",
            "uploadedAt": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

4.6 회원별 파일 목록 조회
GET /api/files/member/{memberId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "fileId": 1,
            "originalFilename": "image.jpg",
            "fileSize": 1024000,
            "fileType": "IMAGE",
            "uploadedAt": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

4.7 파일 삭제 (논리적 삭제)
DELETE /api/files/{fileId}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

4.8 파일 물리적 삭제
DELETE /api/files/{fileId}/permanent

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

4.9 이미지 썸네일 조회
GET /api/files/thumbnail/{fileId}

Response: 이미지 바이너리 데이터

4.10 파일 서비스 상태 확인
GET /api/files/status

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

================================================================================
5. 메시지 관리 API (/api/messages)
================================================================================

5.1 메시지 저장 (Socket Server용)
POST /api/messages
Content-Type: application/json

Request Body:
{
    "roomId": 1,
    "senderId": 1,
    "content": "안녕하세요!",
    "messageType": "TEXT"
}

Response (Success):
{
    "status": "success",
    "data": {
        "messageId": 1,
        "roomId": 1,
        "senderId": 1,
        "content": "안녕하세요!",
        "messageType": "TEXT",
        "timestamp": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

5.2 채팅 히스토리 조회 (페이징)
GET /api/messages/history/{roomId}?page=1&size=50&beforeDate=2024-01-01T12:00:00

Response (Success):
{
    "status": "success",
    "data": [
        {
            "messageId": 1,
            "roomId": 1,
            "senderId": 1,
            "content": "안녕하세요!",
            "messageType": "TEXT",
            "timestamp": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

5.3 채팅방별 메시지 목록 조회
GET /api/messages/room/{roomId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "messageId": 1,
            "roomId": 1,
            "senderId": 1,
            "content": "안녕하세요!",
            "messageType": "TEXT",
            "timestamp": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

5.4 메시지 상세 조회
GET /api/messages/{messageId}

Response (Success):
{
    "status": "success",
    "data": {
        "messageId": 1,
        "roomId": 1,
        "senderId": 1,
        "content": "안녕하세요!",
        "messageType": "TEXT",
        "timestamp": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

5.5 메시지 삭제
DELETE /api/messages/{messageId}

Response (Success):
{
    "status": "success",
    "data": null,
    "errorCode": null
}

5.6 사용자별 메시지 목록 조회
GET /api/messages/user/{senderId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "messageId": 1,
            "roomId": 1,
            "senderId": 1,
            "content": "안녕하세요!",
            "messageType": "TEXT",
            "timestamp": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

5.7 채팅방 메시지 개수 조회
GET /api/messages/count/{roomId}

Response (Success):
{
    "status": "success",
    "data": 150,
    "errorCode": null
}

5.8 최근 메시지 조회
GET /api/messages/recent/{roomId}

Response (Success):
{
    "status": "success",
    "data": [
        {
            "messageId": 150,
            "roomId": 1,
            "senderId": 1,
            "content": "최근 메시지입니다.",
            "messageType": "TEXT",
            "timestamp": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

5.9 메시지 목록 조회 (페이징)
GET /api/messages?page=1&size=20

Response (Success):
{
    "status": "success",
    "data": [
        {
            "messageId": 1,
            "roomId": 1,
            "senderId": 1,
            "content": "안녕하세요!",
            "messageType": "TEXT",
            "timestamp": "2024-01-01T12:00:00"
        }
    ],
    "errorCode": null
}

================================================================================
6. 관리자 API (/api/admin)
================================================================================

6.1 신고 목록 조회 (페이징)
GET /api/admin/reports?page=0&size=10

Response (Success):
{
    "status": "success",
    "data": {
        "content": [
            {
                "reportId": 1,
                "reporterId": 1,
                "reportedId": 2,
                "reportType": "SPAM",
                "reportReason": "스팸 메시지",
                "reportContent": "계속 스팸을 보내고 있습니다.",
                "status": "PENDING",
                "createdAt": "2024-01-01T12:00:00",
                "resolvedAt": null,
                "adminNote": null
            }
        ],
        "totalElements": 25,
        "totalPages": 3,
        "currentPage": 0,
        "size": 10
    },
    "errorCode": null
}

6.2 신고 처리
POST /api/admin/reports/{reportId}/resolve
Content-Type: application/json

Request Body:
{
    "penaltyType": "WARNING",
    "penalty": "경고",
    "adminNote": "스팸 메시지로 인한 경고"
}

Response (Success):
{
    "status": "success",
    "data": {
        "reportId": 1,
        "reporterId": 1,
        "reportedId": 2,
        "reportType": "SPAM",
        "reportReason": "스팸 메시지",
        "status": "RESOLVED",
        "resolvedAt": "2024-01-01T13:00:00",
        "adminNote": "스팸 메시지로 인한 경고"
    },
    "errorCode": null
}

6.3 회원 목록 조회 (페이징)
GET /api/admin/users?page=0&size=10

Response (Success):
{
    "status": "success",
    "data": {
        "content": [
            {
                "id": 1,
                "userid": "user@example.com",
                "nickname": "사용자",
                "name": "홍길동",
                "status": "ACTIVE",
                "emailVerified": true,
                "createdAt": "2024-01-01T00:00:00"
            }
        ],
        "totalElements": 100,
        "totalPages": 10,
        "currentPage": 0,
        "size": 10
    },
    "errorCode": null
}

6.4 회원 상태 변경
PATCH /api/admin/users/{memberId}/status?status=SUSPENDED

Response (Success):
{
    "status": "success",
    "data": {
        "id": 1,
        "userid": "user@example.com",
        "status": "SUSPENDED",
        "updatedAt": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

6.5 관리자 대시보드 통계
GET /api/admin/statistics

Response (Success):
{
    "status": "success",
    "data": {
        "memberStats": {
            "totalMembers": 1000,
            "activeMembers": 850,
            "suspendedMembers": 50,
            "gender": {
                "남성": 500,
                "여성": 500
            },
            "education": {
                "고등학교": 200,
                "대학교": 800
            }
        },
        "reportStats": {
            "totalReports": 25,
            "pendingReports": 10,
            "resolvedReports": 15,
            "reportTypes": {
                "SPAM": 10,
                "ABUSE": 8,
                "INAPPROPRIATE": 7
            }
        },
        "activityStats": {
            "totalStudyRooms": 150,
            "activeStudyRooms": 120,
            "totalMessages": 5000,
            "totalFiles": 300
        }
    },
    "errorCode": null
}

6.6 회원 통계 조회
GET /api/admin/statistics/members

Response (Success):
{
    "status": "success",
    "data": {
        "totalMembers": 1000,
        "activeMembers": 850,
        "suspendedMembers": 50,
        "gender": {
            "남성": 500,
            "여성": 500
        },
        "education": {
            "고등학교": 200,
            "대학교": 800
        },
        "department": {
            "컴퓨터공학과": 300,
            "전자공학과": 250,
            "기계공학과": 200
        },
        "region": {
            "서울": 400,
            "부산": 200,
            "대구": 150
        }
    },
    "errorCode": null
}

6.7 신고 통계 조회
GET /api/admin/statistics/reports

Response (Success):
{
    "status": "success",
    "data": {
        "totalReports": 25,
        "pendingReports": 10,
        "resolvedReports": 15,
        "reportTypes": {
            "SPAM": 10,
            "ABUSE": 8,
            "INAPPROPRIATE": 7
        },
        "monthlyReports": {
            "2024-01": 15,
            "2024-02": 10
        }
    },
    "errorCode": null
}

================================================================================
7. 기타 API
================================================================================

7.1 서버 상태 확인
GET /api/health

Response (Success):
{
    "status": "success",
    "data": {
        "server": "running",
        "database": "connected",
        "timestamp": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

7.2 링크 미리보기
GET /api/link-preview?url=https://example.com

Response (Success):
{
    "status": "success",
    "data": {
        "url": "https://example.com",
        "title": "Example Website",
        "description": "This is an example website.",
        "image": "https://example.com/image.jpg"
    },
    "errorCode": null
}

7.3 신고하기
POST /api/reports
Authorization: Bearer {JWT_TOKEN}
Content-Type: application/json

Request Body:
{
    "reportedId": 2,
    "reportType": "SPAM",
    "reportReason": "스팸 메시지",
    "reportContent": "계속 스팸을 보내고 있습니다."
}

Response (Success):
{
    "status": "success",
    "data": {
        "reportId": 1,
        "reporterId": 1,
        "reportedId": 2,
        "reportType": "SPAM",
        "reportReason": "스팸 메시지",
        "status": "PENDING",
        "createdAt": "2024-01-01T12:00:00"
    },
    "errorCode": null
}

================================================================================
8. 에러 코드 목록
================================================================================

인증 관련:
- EMAIL_REQUIRED: 이메일이 필요합니다
- CODE_REQUIRED: 인증 코드가 필요합니다
- VERIFICATION_SEND_ERROR: 인증 코드 발송 실패
- VERIFICATION_FAILED: 인증 실패
- VERIFICATION_ERROR: 인증 처리 오류
- EMAIL_VERIFICATION_REQUIRED: 이메일 인증이 필요합니다
- REGISTRATION_ERROR: 회원가입 오류
- LOGIN_FAILED: 로그인 실패
- LOGIN_ERROR: 로그인 처리 오류
- AUTH_ERROR: 인증 오류

회원 관련:
- PROFILE_GET_ERROR: 프로필 조회 오류
- PROFILE_UPDATE_ERROR: 프로필 수정 오류
- MEMBER_DELETE_ERROR: 회원 삭제 오류
- ADMIN_CHECK_ERROR: 관리자 권한 확인 오류
- ADMIN_CREATE_ERROR: 관리자 계정 생성 오류

스터디룸 관련:
- STUDY_LIST_ERROR: 스터디룸 목록 조회 오류
- STUDY_GET_ERROR: 스터디룸 조회 오류
- STUDY_CREATE_ERROR: 스터디룸 생성 오류
- STUDY_UPDATE_ERROR: 스터디룸 수정 오류
- STUDY_DELETE_ERROR: 스터디룸 삭제 오류
- JOIN_ERROR: 참가 신청 오류
- MEMBERS_GET_ERROR: 멤버 조회 오류
- STATUS_UPDATE_ERROR: 상태 업데이트 오류
- PENDING_MEMBERS_ERROR: 대기 멤버 조회 오류
- LEAVE_ERROR: 탈퇴 오류
- STUDY_DEPARTMENT_ERROR: 학과별 조회 오류
- STUDY_REGION_ERROR: 지역별 조회 오류
- STUDY_TIME_ERROR: 시간대별 조회 오류

파일 관련:
- FILE_UPLOAD_ERROR: 파일 업로드 오류
- FILE_INFO_ERROR: 파일 정보 조회 오류
- MESSAGE_FILES_ERROR: 메시지 파일 조회 오류
- STUDYROOM_FILES_ERROR: 스터디룸 파일 조회 오류
- MEMBER_FILES_ERROR: 회원 파일 조회 오류
- FILE_DELETE_ERROR: 파일 삭제 오류
- FILE_PERMANENT_DELETE_ERROR: 파일 영구 삭제 오류

메시지 관련:
- MESSAGE_SAVE_ERROR: 메시지 저장 오류
- CHAT_HISTORY_ERROR: 채팅 히스토리 조회 오류
- MESSAGE_LIST_ERROR: 메시지 목록 조회 오류
- MESSAGE_GET_ERROR: 메시지 조회 오류
- MESSAGE_DELETE_ERROR: 메시지 삭제 오류
- USER_MESSAGE_LIST_ERROR: 사용자 메시지 목록 조회 오류
- MESSAGE_COUNT_ERROR: 메시지 개수 조회 오류
- RECENT_MESSAGE_ERROR: 최근 메시지 조회 오류

관리자 관련:
- REPORT_LIST_ERROR: 신고 목록 조회 오류
- REPORT_RESOLVE_ERROR: 신고 처리 오류
- USER_LIST_ERROR: 사용자 목록 조회 오류
- USER_STATUS_UPDATE_ERROR: 사용자 상태 업데이트 오류
- STATISTICS_ERROR: 통계 조회 오류
- MEMBER_STATISTICS_ERROR: 회원 통계 조회 오류
- REPORT_STATISTICS_ERROR: 신고 통계 조회 오류

================================================================================
9. Postman Collection 설정
================================================================================

환경 변수 설정:
- baseUrl: http://localhost:7100
- apiUrl: http://localhost:7100/api
- jwtToken: (로그인 후 받은 토큰)

Pre-request Script (인증이 필요한 API):
```
pm.request.headers.add({
    key: 'Authorization',
    value: 'Bearer {{jwtToken}}'
});
```

Tests Script (로그인 API):
```
if (pm.response.code === 200) {
    const response = pm.response.json();
    if (response.status === 'success' && response.data.token) {
        pm.environment.set('jwtToken', response.data.token);
    }
}
```

================================================================================
10. 사용 예시
================================================================================

1. 회원가입 및 로그인:
   - POST /api/auth/send-verification (이메일 인증 코드 발송)
   - POST /api/auth/verify-email (이메일 인증 확인)
   - POST /api/auth/register (회원가입 - 최소 필수 정보만으로도 가능)
   - POST /api/auth/login (로그인) → JWT 토큰 획득

2. 회원 정보 단계별 입력:
   - PUT /api/members/{username} (기본 정보만으로 가입 후 추가 정보 입력)
   - 예: 전화번호, 학과, 지역 등 선택 정보 추가 입력

3. 스터디룸 생성 및 참가:
   - POST /api/studies (스터디룸 생성)
   - POST /api/studies/{id}/join (스터디룸 참가 신청)
   - GET /api/studies/{id}/members (멤버 목록 조회)

4. 파일 업로드:
   - POST /api/files/upload (파일 업로드)
   - GET /api/files/download/{id} (파일 다운로드)

5. 채팅 메시지:
   - POST /api/messages (메시지 저장)
   - GET /api/messages/history/{roomId} (채팅 히스토리)

6. 관리자 기능:
   - GET /api/admin/statistics (통계 조회)
   - GET /api/admin/reports (신고 목록)
   - PATCH /api/admin/users/{id}/status (회원 상태 변경)

================================================================================
11. 회원가입 워크플로우
================================================================================

📋 단계별 회원가입 프로세스:

1단계: 기본 회원가입 (필수 정보만)
```json
POST /api/auth/register
{
    "userid": "user@example.com",
    "password": "password123",
    "name": "홍길동",
    "nickname": "길동이"
}
```

2단계: 추가 정보 입력 (선택사항)
```json
PUT /api/members/user@example.com
{
    "phone": "010-1234-5678",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "gender": "남성",
    "region": "서울",
    "district": "강남구",
    "time": "오후"
}
```

3단계: 프로필 이미지 업로드 (선택사항)
```json
PUT /api/members/user@example.com
{
    "profileImage": "profile.jpg"
}
```

✅ 장점:
- 빠른 회원가입으로 사용자 진입 장벽 낮춤
- 단계별 정보 입력으로 사용자 경험 향상
- 필수 정보만으로도 서비스 이용 가능
- 나중에 추가 정보 입력 가능

================================================================================
작성일: 2024년 1월 1일
버전: 1.0.0
작성자: BridgeHub Development Team
================================================================================ 