<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.apiserver.dao.BoardCommentDao">

    <resultMap id="BoardCommentResultMap" type="com.koreait.apiserver.entity.BoardComment">
        <id property="commentId" column="comment_id"/>
        <result property="boardId" column="board_id"/>
        <result property="authorId" column="author_id"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="ipAddress" column="ip_address"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="isLiked" column="is_liked"/>
    </resultMap>

    <!-- 댓글 목록 조회 (페이징) -->
    <select id="selectCommentsByBoardId" resultMap="BoardCommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.author_id,
            c.content,
            c.like_count,
            c.is_deleted,
            c.created_at,
            c.updated_at,
            m.nickname as author_nickname,
            <if test="currentUserId != null">
                (SELECT COUNT(*) > 0 FROM comment_likes cl WHERE cl.comment_id = c.comment_id AND cl.member_id = #{currentUserId}) as is_liked
            </if>
            <if test="currentUserId == null">
                FALSE as is_liked
            </if>
        FROM board_comments c
             INNER JOIN members m ON c.author_id = m.id
        WHERE c.board_id = #{boardId} 
              AND c.is_deleted = FALSE
        ORDER BY c.created_at ASC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 댓글 총 개수 조회 -->
    <select id="countCommentsByBoardId" resultType="int">
        SELECT COUNT(*)
        FROM board_comments c
        WHERE c.board_id = #{boardId} 
              AND c.is_deleted = FALSE
    </select>

    <!-- 댓글 상세 조회 -->
    <select id="selectCommentById" resultMap="BoardCommentResultMap">
        SELECT 
            c.comment_id,
            c.board_id,
            c.author_id,
            c.content,
            c.like_count,
            c.is_deleted,
            c.created_at,
            c.updated_at,
            m.nickname as author_nickname,
            <if test="currentUserId != null">
                (SELECT COUNT(*) > 0 FROM comment_likes cl WHERE cl.comment_id = c.comment_id AND cl.member_id = #{currentUserId}) as is_liked
            </if>
            <if test="currentUserId == null">
                FALSE as is_liked
            </if>
        FROM board_comments c
             INNER JOIN members m ON c.author_id = m.id
        WHERE c.comment_id = #{commentId} AND c.is_deleted = FALSE
    </select>

    
    <!-- 댓글 작성 -->
    <insert id="insertComment" parameterType="com.koreait.apiserver.entity.BoardComment" useGeneratedKeys="true" keyProperty="commentId">
        INSERT INTO board_comments (
            board_id, author_id, content, ip_address, created_at, updated_at
        ) VALUES (
            #{boardId}, #{authorId}, #{content}, #{ipAddress}, NOW(), NOW()
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.koreait.apiserver.entity.BoardComment">
        UPDATE board_comments SET
            content = #{content},
            updated_at = NOW()
        WHERE comment_id = #{commentId} AND author_id = #{authorId}
    </update>

    <!-- 댓글 삭제 (소프트 삭제) -->
    <update id="deleteComment">
        UPDATE board_comments SET 
            is_deleted = TRUE,
            updated_at = NOW()
        WHERE comment_id = #{commentId} AND author_id = #{authorId}
    </update>

    <!-- 댓글 좋아요 추가 -->
    <insert id="insertCommentLike">
        INSERT INTO comment_likes (comment_id, member_id, created_at)
        VALUES (#{commentId}, #{memberId}, NOW())
    </insert>

    <!-- 댓글 좋아요 삭제 -->
    <delete id="deleteCommentLike">
        DELETE FROM comment_likes 
        WHERE comment_id = #{commentId} AND member_id = #{memberId}
    </delete>

    <!-- 사용자의 댓글 좋아요 상태 확인 -->
    <select id="isCommentLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM comment_likes
        WHERE comment_id = #{commentId} AND member_id = #{memberId}
    </select>

    <!-- 댓글 작성자 본인 확인 -->
    <select id="isCommentAuthor" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM board_comments
        WHERE comment_id = #{commentId} AND author_id = #{authorId}
    </select>

</mapper> 