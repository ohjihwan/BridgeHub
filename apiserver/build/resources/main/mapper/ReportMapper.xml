<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.apiserver.dao.ReportDao">

    <resultMap id="ReportResultMap" type="com.koreait.apiserver.entity.Report">
        <id property="reportId" column="report_id"/>
        <result property="reporterId" column="reporter_id"/>
        <result property="reportedUserId" column="reported_user_id"/>
        <result property="reportType" column="report_type"/>
        <result property="messageId" column="message_id"/>
        <result property="roomId" column="room_id"/>
        <result property="studyRoomId" column="study_room_id"/>
        <result property="reason" column="reason"/>
        <result property="createdAt" column="created_at"/>
        <result property="status" column="status"/>
        <result property="adminComment" column="admin_comment"/>
        <result property="logFileId" column="log_file_id"/>
        <result property="logMessageIndex" column="log_message_index"/>
    </resultMap>

    <insert id="insertReport" parameterType="com.koreait.apiserver.entity.Report" useGeneratedKeys="true" keyProperty="reportId">
        INSERT INTO Report (reporter_id, reported_user_id, report_type, message_id, room_id, study_room_id, reason, created_at, status)
        VALUES (#{reporterId}, #{reportedUserId}, #{reportType}, #{messageId}, #{roomId}, #{studyRoomId}, #{reason}, NOW(), #{status})
    </insert>

    <select id="findById" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE report_id = #{reportId}
    </select>

    <select id="findAll" resultMap="ReportResultMap">
        SELECT * FROM Report ORDER BY created_at DESC
    </select>

    <select id="findByReporterId" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE reporter_id = #{reporterId} ORDER BY created_at DESC
    </select>

    <select id="findByReportedUserId" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE reported_user_id = #{reportedUserId} ORDER BY created_at DESC
    </select>

    <select id="findByStatus" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE status = #{status} ORDER BY created_at DESC
    </select>

    <select id="findByReportType" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE report_type = #{reportType} ORDER BY created_at DESC
    </select>

    <select id="findPendingReports" resultMap="ReportResultMap">
        SELECT * FROM Report WHERE status = 'PENDING' ORDER BY created_at ASC
    </select>

    <update id="updateReportStatus">
        UPDATE Report 
        SET status = #{status}, 
            admin_comment = #{adminComment}
        WHERE report_id = #{reportId}
    </update>

    <delete id="deleteReport">
        UPDATE Report 
        SET admin_comment = CONCAT(IFNULL(admin_comment, ''), ' [ADMIN_DELETED]')
        WHERE report_id = #{reportId}
    </delete>

    <select id="countByStatus" resultType="int">
        SELECT COUNT(*) FROM Report WHERE status = #{status}
    </select>

    <!-- 관리자 기능 추가 -->
    <select id="findAllWithPaging" resultType="com.koreait.apiserver.dto.ReportDTO">
        SELECT 
            r.report_id as reportId,
            r.reporter_id as reporterId,
            r.reported_user_id as reportedUserId,
            r.report_type as reportType,
            r.message_id as messageId,
            r.room_id as roomId,
            r.study_room_id as studyRoomId,
            r.reason,
            r.created_at as createdAt,
            r.status,
            r.admin_comment as adminComment,
            reporter.nickname as reporterName,
            reported.nickname as reportedUserName,
            sr.title as studyRoomTitle,
            null as messageContent,
            null as roomName
        FROM Report r
        LEFT JOIN members reporter ON r.reporter_id = reporter.id
        LEFT JOIN members reported ON r.reported_user_id = reported.id
        LEFT JOIN studyroom sr ON r.study_room_id = sr.study_room_id
        WHERE (r.admin_comment IS NULL OR r.admin_comment NOT LIKE '%[ADMIN_DELETED]%')
        ORDER BY r.created_at DESC 
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*) FROM Report WHERE (admin_comment IS NULL OR admin_comment NOT LIKE '%[ADMIN_DELETED]%')
    </select>

    <select id="findRecentReports" resultType="com.koreait.apiserver.dto.ReportDTO">
        SELECT 
            r.report_id as reportId,
            r.reporter_id as reporterId,
            r.reported_user_id as reportedUserId,
            r.report_type as reportType,
            r.message_id as messageId,
            r.room_id as roomId,
            r.study_room_id as studyRoomId,
            r.reason,
            r.created_at as createdAt,
            r.status,
            r.admin_comment as adminComment,
            reporter.nickname as reporterName,
            reported.nickname as reportedUserName,
            sr.title as studyRoomTitle,
            null as messageContent,
            null as roomName
        FROM Report r
        LEFT JOIN members reporter ON r.reporter_id = reporter.id
        LEFT JOIN members reported ON r.reported_user_id = reported.id
        LEFT JOIN studyroom sr ON r.study_room_id = sr.study_room_id
        WHERE (r.admin_comment IS NULL OR r.admin_comment NOT LIKE '%[ADMIN_DELETED]%')
        ORDER BY r.created_at DESC 
        LIMIT #{limit}
    </select>

    <select id="countByReportType" resultType="map">
        SELECT report_type, COUNT(*) as count FROM Report WHERE (admin_comment IS NULL OR admin_comment NOT LIKE '%[ADMIN_DELETED]%') GROUP BY report_type
    </select>

    <!-- 디버그용 간단한 Report 조회 -->
    <select id="findSimpleReports" resultType="map">
        SELECT 
            report_id,
            reporter_id,
            reported_user_id,
            report_type,
            reason,
            status,
            created_at
        FROM Report 
        ORDER BY created_at DESC 
        LIMIT 5
    </select>

</mapper> 