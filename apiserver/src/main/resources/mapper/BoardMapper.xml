<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.apiserver.dao.BoardDao">

    <resultMap id="BoardResultMap" type="com.koreait.apiserver.entity.Board">
        <id property="boardId" column="board_id"/>
        <result property="categoryId" column="category_id"/>
        <result property="authorId" column="author_id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="isNotice" column="is_notice"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="ipAddress" column="ip_address"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="categoryName" column="category_name"/>
        <result property="attachmentCount" column="attachment_count"/>
        <result property="isLiked" column="is_liked"/>
    </resultMap>

    <!-- 게시글 목록 조회 -->
    <select id="selectBoardList" resultMap="BoardResultMap">
        SELECT 
            b.board_id,
            b.category_id,
            bc.category_name,
            b.title,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.is_notice,
            b.created_at,
            b.updated_at,
            m.nickname as author_nickname,
            (SELECT COUNT(*) FROM file f WHERE f.board_id = b.board_id AND f.is_deleted = FALSE) as attachment_count,
            <if test="currentUserId != null">
                (SELECT COUNT(*) > 0 FROM board_likes bl WHERE bl.board_id = b.board_id AND bl.member_id = #{currentUserId}) as is_liked
            </if>
            <if test="currentUserId == null">
                FALSE as is_liked
            </if>
        FROM board b
             INNER JOIN members m ON b.author_id = m.id
             LEFT JOIN board_categories bc ON b.category_id = bc.category_id
        WHERE b.is_deleted = FALSE
        <if test="categoryId != null">
            AND b.category_id = #{categoryId}
        </if>
        <if test="search != null and search != ''">
            AND (b.title LIKE CONCAT('%', #{search}, '%') 
                 OR b.content LIKE CONCAT('%', #{search}, '%'))
        </if>
        ORDER BY 
        <choose>
            <when test="sort == 'popular'">
                b.like_count DESC, b.created_at DESC
            </when>
            <when test="sort == 'views'">
                b.view_count DESC, b.created_at DESC
            </when>
            <otherwise>
                b.is_notice DESC, b.created_at DESC
            </otherwise>
        </choose>
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 게시글 총 개수 조회 -->
    <select id="countBoards" resultType="int">
        SELECT COUNT(*)
        FROM board b
        WHERE b.is_deleted = FALSE
        <if test="categoryId != null">
            AND b.category_id = #{categoryId}
        </if>
        <if test="search != null and search != ''">
            AND (b.title LIKE CONCAT('%', #{search}, '%') 
                 OR b.content LIKE CONCAT('%', #{search}, '%'))
        </if>
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="selectBoardById" resultMap="BoardResultMap">
        SELECT 
            b.board_id,
            b.category_id,
            bc.category_name,
            b.author_id,
            b.title,
            b.content,
            b.view_count,
            b.like_count,
            b.comment_count,
            b.is_notice,
            b.created_at,
            b.updated_at,
            m.nickname as author_nickname,
            <if test="currentUserId != null">
                (SELECT COUNT(*) > 0 FROM board_likes bl WHERE bl.board_id = b.board_id AND bl.member_id = #{currentUserId}) as is_liked
            </if>
            <if test="currentUserId == null">
                FALSE as is_liked
            </if>
        FROM board b
             INNER JOIN members m ON b.author_id = m.id
             LEFT JOIN board_categories bc ON b.category_id = bc.category_id
        WHERE b.board_id = #{boardId} AND b.is_deleted = FALSE
    </select>

    <!-- 게시글 작성 -->
    <insert id="insertBoard" parameterType="com.koreait.apiserver.entity.Board" useGeneratedKeys="true" keyProperty="boardId">
        INSERT INTO board (
            category_id, author_id, title, content, 
            is_notice, ip_address, created_at, updated_at
        ) VALUES (
            #{categoryId}, #{authorId}, #{title}, #{content},
            #{isNotice}, #{ipAddress}, NOW(), NOW()
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateBoard" parameterType="com.koreait.apiserver.entity.Board">
        UPDATE board SET
            category_id = #{categoryId},
            title = #{title},
            content = #{content},
            updated_at = NOW()
        WHERE board_id = #{boardId} AND author_id = #{authorId}
    </update>

    <!-- 게시글 삭제 (소프트 삭제) -->
    <update id="deleteBoard">
        UPDATE board SET 
            is_deleted = TRUE,
            updated_at = NOW()
        WHERE board_id = #{boardId} AND author_id = #{authorId}
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount">
        UPDATE board SET 
            view_count = view_count + 1
        WHERE board_id = #{boardId}
    </update>

    <!-- 좋아요 추가 -->
    <insert id="insertLike">
        INSERT INTO board_likes (board_id, member_id, created_at)
        VALUES (#{boardId}, #{memberId}, NOW())
    </insert>

    <!-- 좋아요 삭제 -->
    <delete id="deleteLike">
        DELETE FROM board_likes 
        WHERE board_id = #{boardId} AND member_id = #{memberId}
    </delete>

    <!-- 사용자의 좋아요 상태 확인 -->
    <select id="isLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM board_likes
        WHERE board_id = #{boardId} AND member_id = #{memberId}
    </select>

    <!-- 게시글 첨부파일 목록 조회 -->
    <select id="selectBoardAttachments" resultType="com.koreait.apiserver.entity.File">
        SELECT 
            file_id as fileId,
            original_filename as originalFilename,
            stored_filename as storedFilename,
            file_size as fileSize,
            mime_type as mimeType,
            uploaded_at as uploadedAt
        FROM file
        WHERE board_id = #{boardId} AND is_deleted = FALSE
        ORDER BY uploaded_at ASC
    </select>

    <!-- 작성자 본인 확인 -->
    <select id="isAuthor" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM board
        WHERE board_id = #{boardId} AND author_id = #{authorId}
    </select>

</mapper> 