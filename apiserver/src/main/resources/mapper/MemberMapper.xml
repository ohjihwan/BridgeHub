<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.koreait.apiserver.dao.MemberDao">

    <resultMap id="MemberResultMap" type="com.koreait.apiserver.entity.Member">
        <id property="id" column="id"/>
        <result property="userid" column="userid"/>
        <result property="phone" column="phone"/>
        <result property="nickname" column="nickname"/>
        <result property="name" column="name"/>
        <result property="password" column="password"/>
        <result property="education" column="education"/>
        <result property="department" column="department"/>
        <result property="gender" column="gender"/>
        <result property="region" column="region"/>
        <result property="district" column="district"/>
        <result property="time" column="time"/>
        <result property="profileImage" column="profile_image"/>
        <result property="role" column="role"/>
        <result property="status" column="status"/>
        <result property="emailVerified" column="email_verified"/>
        <result property="emailVerificationCode" column="email_verification_code"/>
        <result property="emailVerificationExpiresAt" column="email_verification_expires_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <insert id="insertMember" parameterType="com.koreait.apiserver.entity.Member" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO members (userid, phone, nickname, name, password, education, department, gender, region, district, time, profile_image,  status, email_verified,  created_at, updated_at)
        VALUES (#{userid}, #{phone}, #{nickname}, #{name}, #{password}, #{education}, #{department}, #{gender}, #{region}, #{district}, #{time}, #{profileImage},  #{status}, #{emailVerified},  NOW(), NOW())
    </insert>

    <select id="findById" resultMap="MemberResultMap">
        SELECT * FROM members WHERE id = #{id}
    </select>

    <select id="findByUsername" resultMap="MemberResultMap">
        SELECT * FROM members WHERE userid = #{username}
    </select>

    <select id="findByEmail" resultMap="MemberResultMap">
        SELECT * FROM members WHERE userid = #{email}
    </select>

    <select id="findAll" resultMap="MemberResultMap">
        SELECT * FROM members ORDER BY created_at DESC
    </select>

    <update id="updateMember" parameterType="com.koreait.apiserver.entity.Member">
        UPDATE members 
        SET userid = #{userid}, 
            phone = #{phone},
            nickname = #{nickname},
            name = #{name},
            password = #{password}, 
            education = #{education},
            department = #{department},
            gender = #{gender},
            region = #{region},
            district = #{district},
            time = #{time},
            profile_image = #{profileImage},
            role = #{role}, 
            status = #{status},
            email_verified = #{emailVerified},
            email_verification_code = #{emailVerificationCode},
            email_verification_expires_at = #{emailVerificationExpiresAt},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <update id="updateEmailVerification">
        UPDATE members 
        SET email_verified = #{emailVerified}, 
            email_verification_code = #{emailVerificationCode},
            email_verification_expires_at = #{emailVerificationExpiresAt},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <delete id="deleteMember">
        DELETE FROM members WHERE id = #{id}
    </delete>

    <select id="existsByUsername" resultType="boolean">
        SELECT COUNT(*) > 0 FROM members WHERE userid = #{username}
    </select>

    <select id="existsByEmail" resultType="boolean">
        SELECT COUNT(*) > 0 FROM members WHERE userid = #{email}
    </select>

    <select id="findByDepartment" resultMap="MemberResultMap">
        SELECT * FROM members WHERE department = #{department} AND status = 'ACTIVE'
    </select>

    <select id="findByRegion" resultMap="MemberResultMap">
        SELECT * FROM members WHERE region = #{region} AND status = 'ACTIVE'
    </select>

    <select id="findByTime" resultMap="MemberResultMap">
        SELECT * FROM members WHERE time = #{time} AND status = 'ACTIVE'
    </select>

    <!-- 관리자 기능 추가 -->
    <select id="findAllWithPaging" resultMap="MemberResultMap">
        SELECT * FROM members 
        ORDER BY created_at DESC 
        LIMIT #{size} OFFSET #{offset}
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*) FROM members
    </select>

    <update id="updateMemberRole">
        UPDATE members 
        SET role = #{role}, 
            updated_at = NOW()
        WHERE id = #{memberId}
    </update>

    <update id="updateMemberStatus">
        UPDATE members 
        SET status = #{status}, 
            updated_at = NOW()
        WHERE id = #{memberId}
    </update>

</mapper> 