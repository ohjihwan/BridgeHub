BridgeHub 프로젝트 구조 및 기능 정리
====================================

1. 프로젝트 구조
---------------
BridgeHub/
├── api-server/                # API 서버 (데이터 관리)
│   ├── src/
│   │   ├── routes/           # API 라우트
│   │   │   ├── emailRoutes.js    # 이메일 인증 관련 라우트
│   │   │   ├── studyRoutes.js    # 스터디 관련 라우트
│   │   │   └── fileRoutes.js     # 파일 관리 라우트
│   │   ├── controllers/      # 컨트롤러
│   │   │   ├── emailController.js # 이메일 인증 컨트롤러
│   │   │   ├── studyController.js # 스터디 컨트롤러
│   │   │   └── fileController.js  # 파일 컨트롤러
│   │   └── services/         # 비즈니스 로직
│   │       ├── emailService.js    # 이메일 서비스
│   │       ├── studyService.js    # 스터디 서비스
│   │       └── fileService.js     # 파일 서비스
│   ├── uploads/              # 파일 업로드 디렉토리
│   ├── test/                 # API 테스트 파일
│   │   ├── api-test.html     # API 테스트 페이지
│   │   └── test-files/       # 테스트용 파일
│   ├── index.js              # API 서버 메인 파일
│   └── package.json
│
├── socket-server/            # 소켓 서버 (실시간 통신)
│   ├── src/
│   │   └── socket/          # 소켓 관련 로직
│   │       ├── chatHandler.js    # 채팅 핸들러
│   │       └── fileHandler.js    # 파일 공유 핸들러
│   ├── test/                # 소켓 테스트 파일
│   │   ├── chat-test.html   # 채팅 테스트 페이지
│   │   └── test-files/      # 테스트용 파일
│   ├── index.js             # 소켓 서버 메인 파일
│   └── package.json
│
└── front-server/            # 프론트엔드 서버
    ├── src/
    │   ├── components/      # React 컴포넌트
    │   │   ├── Auth/        # 인증 관련 컴포넌트
    │   │   │   ├── Login.jsx    # 로그인
    │   │   │   └── Signup.jsx   # 회원가입
    │   │   ├── Study/       # 스터디 관련 컴포넌트
    │   │   │   ├── Create.jsx   # 스터디 생성
    │   │   │   ├── List.jsx     # 스터디 목록
    │   │   │   └── Detail.jsx   # 스터디 상세
    │   │   └── Chat/        # 채팅 관련 컴포넌트
    │   │       ├── ChatList.jsx # 채팅 목록
    │   │       └── ChatRoom.jsx # 채팅방
    │   ├── scss/            # 스타일 파일
    │   │   ├── components/  # 컴포넌트별 스타일
    │   │   └── App.scss     # 메인 스타일
    │   ├── socket.js        # 소켓 연결 관리
    │   ├── App.jsx          # 메인 앱 컴포넌트
    │   └── main.jsx         # 진입점
    └── package.json

2. 서버 역할 및 기능
------------------
2.1 API 서버 (api-server)
- 포트: 7100
- 주요 기능:
  * 이메일 인증
    - 인증 코드 생성 및 이메일 전송
    - 인증 코드 검증
    - JWT 토큰 발급
  * 스터디 관리
    - 스터디 생성/조회/수정/삭제
    - 스터디 참여/탈퇴
    - 스터디 메시지 저장
  * 파일 관리
    - 파일 업로드/다운로드
    - 파일 목록 조회
    - MIME 타입 검증
  * 보안
    - JWT 토큰 검증
    - CORS 설정
    - 파일 업로드 검증

2.2 소켓 서버 (socket-server)
- 포트: 7500
- 주요 기능:
  * 실시간 통신
    - 채팅 메시지 전송/수신
    - 채팅방 참여/퇴장 관리
    - 참여자 수 실시간 업데이트
  * 파일 공유
    - 파일 업로드 알림
    - 파일 다운로드 링크 생성
    - 파일 공유 상태 관리
  * 시스템 메시지
    - 사용자 입장/퇴장 알림
    - 에러 메시지 전송
    - 파일 공유 알림

2.3 프론트엔드 서버 (front-server)
- 포트: 5173
- 주요 기능:
  * 인증
    - 로그인/회원가입
    - 이메일 인증
    - JWT 토큰 관리
  * 스터디 관리
    - 스터디 목록 조회
    - 스터디 생성/참여
    - 스터디 상세 정보
  * 채팅
    - 실시간 메시지
    - 파일 공유
    - 참여자 관리
  * 파일 관리
    - 파일 업로드
    - 파일 다운로드
    - 파일 미리보기

3. API 엔드포인트
---------------
3.1 이메일 인증 (/api/email)
- POST /send-verification: 인증 코드 전송
- POST /verify-code: 인증 코드 확인

3.2 스터디 관리 (/api/study)
- POST /create: 스터디 생성
- GET /list: 스터디 목록 조회
- GET /:id: 스터디 상세 정보
- POST /:id/join: 스터디 참여
- POST /:id/leave: 스터디 탈퇴
- POST /:id/messages: 메시지 저장
- GET /:id/messages: 메시지 조회

3.3 파일 관리 (/api/study/:studyId/files)
- POST /upload: 파일 업로드
- GET /list: 파일 목록 조회
- GET /:filename: 파일 다운로드
- GET /:filename/preview: 파일 미리보기
- DELETE /:filename: 파일 삭제

4. 소켓 이벤트
------------
4.1 클라이언트 -> 서버
- join-study: 스터디 참여
- leave-study: 스터디 퇴장
- send-message: 메시지 전송
- file-upload: 파일 업로드
- file-download: 파일 다운로드

4.2 서버 -> 클라이언트
- new-message: 새 메시지 수신
- member-count: 참여자 수 업데이트
- file-upload-complete: 파일 업로드 완료
- file-download-ready: 파일 다운로드 준비
- error: 에러 메시지

5. 보안 기능
----------
- JWT 기반 인증
- CORS 설정
- 파일 업로드 검증
- 이메일 인증 코드 만료 (10분)
- MIME 타입 검증
- 파일 크기 제한 (10MB)

6. 데이터베이스
------------
- 현재: 메모리 기반 임시 저장
- 향후: MongoDB 연동 예정

7. 향후 개선 사항
--------------
- 데이터베이스 연동
- 사용자 프로필 관리
- 스터디 검색 기능
- 알림 시스템
- 파일 공유 기능 개선
- UI/UX 개선
- API Gateway 도입 검토
- WebRTC 통합 검토 