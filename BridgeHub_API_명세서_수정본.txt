================================================================================
                    BridgeHub API 명세서 (수정본)
                    - 사용자 이름 제거, 닉네임만 사용 -
================================================================================

📅 수정일: 2024-01-15
🔄 주요 변경사항: 
   - 모든 API에서 사용자 이름(name) 제거
   - 닉네임(nickname)만 사용하여 개인정보 보호
   - 스터디룸 상세 조회 시 현재 참가 멤버 닉네임 목록 추가

================================================================================
1. 인증 관련 API (AuthController)
================================================================================

1.1 회원가입
- URL: POST http://localhost:7100/api/auth/register
- Content-Type: application/json
- Request Body:
{
    "userid": "test@example.com",
    "password": "password123",
    "phone": "010-1234-5678",
    "nickname": "테스트유저",
    "name": "홍길동",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "gender": "남자",
    "region": "서울",
    "district": "강남구",
    "time": "오후",
    "emailVerified": true
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "memberId": 1,
        "userid": "test@example.com",
        "nickname": "테스트유저"
    }
}

1.2 로그인
- URL: POST http://localhost:7100/api/auth/login
- Content-Type: application/json
- Request Body:
{
    "userid": "test@example.com",
    "password": "password123"
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "token": "eyJhbGciOiJIUzI1NiJ9...",
        "memberId": 1,
        "userid": "test@example.com",
        "nickname": "테스트유저"
    }
}

1.3 이메일 인증 코드 발송
- URL: POST http://localhost:7100/api/auth/send-verification
- Content-Type: application/json
- Request Body:
{
    "email": "test@example.com"
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

1.4 이메일 인증 코드 확인
- URL: POST http://localhost:7100/api/auth/verify-email
- Content-Type: application/json
- Request Body:
{
    "email": "test@example.com",
    "code": "123456"
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

================================================================================
2. 스터디룸 관련 API (StudyRoomController)
================================================================================

2.1 스터디룸 생성
- URL: POST http://localhost:7100/api/studies
- Authorization: Bearer {token}
- Content-Type: application/json
- Request Body:
{
    "title": "자바 스터디",
    "description": "자바 프로그래밍 기초부터 심화까지",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "region": "서울",
    "district": "강남구",
    "capacity": 8,
    "time": "오후",
    "thumbnail": "/uploads/thumbnails/java-study.jpg",
    "isPublic": true
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "studyRoomId": 1,
        "roomId": 1,
        "bossId": 1,
        "title": "자바 스터디",
        "description": "자바 프로그래밍 기초부터 심화까지",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "region": "서울",
        "district": "강남구",
        "capacity": 8,
        "currentMembers": 1,
        "time": "오후",
        "thumbnail": "/uploads/thumbnails/java-study.jpg",
        "isPublic": true,
        "createdAt": "2024-01-15T10:30:00",
        "bossNickname": "테스트유저",
        "bossProfileImage": "/uploads/profiles/default.jpg"
    }
}

2.2 스터디룸 목록 조회
- URL: GET http://localhost:7100/api/studies
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": [
        {
            "studyRoomId": 1,
            "roomId": 1,
            "bossId": 1,
            "title": "자바 스터디",
            "description": "자바 프로그래밍 기초부터 심화까지",
            "education": "대학교",
            "department": "컴퓨터공학과",
            "region": "서울",
            "district": "강남구",
            "capacity": 8,
            "currentMembers": 3,
            "time": "오후",
            "thumbnail": "/uploads/thumbnails/java-study.jpg",
            "isPublic": true,
            "createdAt": "2024-01-15T10:30:00",
            "bossNickname": "테스트유저",
            "bossProfileImage": "/uploads/profiles/default.jpg"
        }
    ]
}

2.3 스터디룸 상세 조회 (수정됨)
- URL: GET http://localhost:7100/api/studies/{studyRoomId}
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "studyRoomId": 1,
        "roomId": 1,
        "bossId": 1,
        "title": "자바 스터디",
        "description": "자바 프로그래밍 기초부터 심화까지",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "region": "서울",
        "district": "강남구",
        "capacity": 8,
        "currentMembers": 3,
        "time": "오후",
        "thumbnail": "/uploads/thumbnails/java-study.jpg",
        "isPublic": true,
        "createdAt": "2024-01-15T10:30:00",
        "bossNickname": "테스트유저",
        "bossProfileImage": "/uploads/profiles/default.jpg",
        "memberNicknames": ["테스트유저", "영희", "철수"]
    }
}

2.4 스터디룸 수정
- URL: PUT http://localhost:7100/api/studies/{studyRoomId}
- Authorization: Bearer {token}
- Content-Type: application/json
- Request Body:
{
    "title": "자바 스터디 (수정됨)",
    "description": "수정된 설명",
    "education": "대학교",
    "department": "컴퓨터공학과",
    "region": "서울",
    "district": "강남구",
    "capacity": 10,
    "time": "오후",
    "thumbnail": "/uploads/thumbnails/java-study-updated.jpg",
    "isPublic": true
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "studyRoomId": 1,
        "roomId": 1,
        "bossId": 1,
        "title": "자바 스터디 (수정됨)",
        "description": "수정된 설명",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "region": "서울",
        "district": "강남구",
        "capacity": 10,
        "currentMembers": 3,
        "time": "오후",
        "thumbnail": "/uploads/thumbnails/java-study-updated.jpg",
        "isPublic": true,
        "createdAt": "2024-01-15T10:30:00",
        "bossNickname": "테스트유저",
        "bossProfileImage": "/uploads/profiles/default.jpg"
    }
}

2.5 스터디룸 삭제
- URL: DELETE http://localhost:7100/api/studies/{studyRoomId}
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

2.6 스터디 참가 신청
- URL: POST http://localhost:7100/api/studies/{studyRoomId}/join
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

2.7 스터디 멤버 조회
- URL: GET http://localhost:7100/api/studies/{studyRoomId}/members
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": [
        {
            "id": 1,
            "studyRoomId": 1,
            "memberId": 1,
            "role": "BOSS",
            "status": "APPROVED",
            "joinedAt": "2024-01-15T10:30:00",
            "approvedAt": "2024-01-15T10:30:00",
            "approvedBy": null,
            "memberNickname": "테스트유저",
            "memberEmail": "test@example.com",
            "memberProfileImage": "/uploads/profiles/default.jpg",
            "memberDescription": "안녕하세요!",
            "studyRoomTitle": "자바 스터디"
        },
        {
            "id": 2,
            "studyRoomId": 1,
            "memberId": 2,
            "role": "MEMBER",
            "status": "APPROVED",
            "joinedAt": "2024-01-15T11:00:00",
            "approvedAt": "2024-01-15T11:30:00",
            "approvedBy": 1,
            "memberNickname": "영희",
            "memberEmail": "younghee@example.com",
            "memberProfileImage": "/uploads/profiles/younghee.jpg",
            "memberDescription": "열심히 공부하겠습니다!",
            "studyRoomTitle": "자바 스터디"
        }
    ]
}

2.8 대기 중인 멤버 조회 (방장만)
- URL: GET http://localhost:7100/api/studies/{studyRoomId}/pending-members
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": [
        {
            "id": 3,
            "studyRoomId": 1,
            "memberId": 3,
            "role": "MEMBER",
            "status": "PENDING",
            "joinedAt": "2024-01-15T12:00:00",
            "approvedAt": null,
            "approvedBy": null,
            "memberNickname": "철수",
            "memberEmail": "chulsoo@example.com",
            "memberProfileImage": "/uploads/profiles/chulsoo.jpg",
            "memberDescription": "참가하고 싶습니다!",
            "studyRoomTitle": "자바 스터디"
        }
    ]
}

2.9 멤버 상태 업데이트 (승인/거절)
- URL: PUT http://localhost:7100/api/studies/{studyRoomId}/members/{memberId}/status?status=APPROVED
- Authorization: Bearer {token}
- Query Parameters: status (APPROVED/REJECTED)
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

2.10 스터디 탈퇴
- URL: DELETE http://localhost:7100/api/studies/{studyRoomId}/leave
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

2.11 학과별 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/department/{department}
- Authorization: Bearer {token}
- Response: 스터디룸 목록 (2.2와 동일한 형식)

2.12 지역별 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/region/{region}
- Authorization: Bearer {token}
- Response: 스터디룸 목록 (2.2와 동일한 형식)

2.13 시간대별 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/time/{time}
- Authorization: Bearer {token}
- Response: 스터디룸 목록 (2.2와 동일한 형식)

2.14 인기 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/hot?limit=6
- Authorization: Bearer {token}
- Query Parameters: limit (기본값: 6)
- Response: 스터디룸 목록 (2.2와 동일한 형식)

2.15 내가 참여한 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/my-studies
- Authorization: Bearer {token}
- Response: 스터디룸 목록 (2.2와 동일한 형식)

2.16 내가 생성한 스터디룸 조회
- URL: GET http://localhost:7100/api/studies/my-created
- Authorization: Bearer {token}
- Response: 스터디룸 목록 (2.2와 동일한 형식)

================================================================================
3. 메시지 관련 API (MessageController) - 수정됨
================================================================================

3.1 메시지 저장 (Socket Server에서 호출)
- URL: POST http://localhost:7100/api/messages
- Content-Type: application/json
- Request Body:
{
    "roomId": 1,
    "senderId": 1,
    "content": "안녕하세요!",
    "messageType": "TEXT"
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "messageId": 1,
        "roomId": 1,
        "senderId": 1,
        "content": "안녕하세요!",
        "messageType": "TEXT",
        "sentAt": "2024-01-15T10:30:00",
        "isDeleted": false,
        "senderNickname": "테스트유저",
        "senderProfileImage": "/uploads/profiles/default.jpg",
        "linkPreviews": [],
        "hasLinks": false
    }
}

3.2 채팅 히스토리 조회
- URL: GET http://localhost:7100/api/messages/history/{roomId}?page=1&size=50&beforeDate=2024-01-15T00:00:00
- Authorization: Bearer {token}
- Query Parameters: page, size, beforeDate (선택)
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": [
        {
            "messageId": 1,
            "roomId": 1,
            "senderId": 1,
            "content": "안녕하세요!",
            "messageType": "TEXT",
            "sentAt": "2024-01-15T10:30:00",
            "isDeleted": false,
            "senderNickname": "테스트유저",
            "senderProfileImage": "/uploads/profiles/default.jpg",
            "linkPreviews": [],
            "hasLinks": false
        },
        {
            "messageId": 2,
            "roomId": 1,
            "senderId": 2,
            "content": "반갑습니다!",
            "messageType": "TEXT",
            "sentAt": "2024-01-15T10:31:00",
            "isDeleted": false,
            "senderNickname": "영희",
            "senderProfileImage": "/uploads/profiles/younghee.jpg",
            "linkPreviews": [],
            "hasLinks": false
        }
    ]
}

3.3 채팅방별 메시지 조회
- URL: GET http://localhost:7100/api/messages/room/{roomId}
- Authorization: Bearer {token}
- Response: 메시지 목록 (3.2와 동일한 형식)

3.4 메시지 상세 조회
- URL: GET http://localhost:7100/api/messages/{messageId}
- Authorization: Bearer {token}
- Response: 단일 메시지 (3.2의 data 배열 중 하나와 동일한 형식)

3.5 메시지 삭제 (논리 삭제)
- URL: DELETE http://localhost:7100/api/messages/{messageId}
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

3.6 사용자별 메시지 조회
- URL: GET http://localhost:7100/api/messages/user/{senderId}
- Authorization: Bearer {token}
- Response: 메시지 목록 (3.2와 동일한 형식)

3.7 채팅방 메시지 개수
- URL: GET http://localhost:7100/api/messages/count/{roomId}
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": 150
}

3.8 최근 메시지 조회
- URL: GET http://localhost:7100/api/messages/recent/{roomId}
- Authorization: Bearer {token}
- Response: 최근 20개 메시지 (3.2와 동일한 형식)

================================================================================
4. 회원 관련 API (MemberController)
================================================================================

4.1 내 정보 조회
- URL: GET http://localhost:7100/api/members/me
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "memberId": 1,
        "userid": "test@example.com",
        "nickname": "테스트유저",
        "phone": "010-1234-5678",
        "education": "대학교",
        "department": "컴퓨터공학과",
        "gender": "남자",
        "region": "서울",
        "district": "강남구",
        "time": "오후",
        "profileImage": "/uploads/profiles/default.jpg",
        "description": "안녕하세요!"
    }
}

4.2 내 정보 수정
- URL: PUT http://localhost:7100/api/members/me
- Authorization: Bearer {token}
- Content-Type: application/json
- Request Body:
{
    "nickname": "수정된닉네임",
    "phone": "010-9876-5432",
    "education": "대학교",
    "department": "소프트웨어공학과",
    "gender": "남자",
    "region": "서울",
    "district": "서초구",
    "time": "저녁",
    "description": "수정된 자기소개입니다."
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": {
        "memberId": 1,
        "userid": "test@example.com",
        "nickname": "수정된닉네임",
        "phone": "010-9876-5432",
        "education": "대학교",
        "department": "소프트웨어공학과",
        "gender": "남자",
        "region": "서울",
        "district": "서초구",
        "time": "저녁",
        "profileImage": "/uploads/profiles/default.jpg",
        "description": "수정된 자기소개입니다."
    }
}

4.3 비밀번호 변경
- URL: PUT http://localhost:7100/api/members/password
- Authorization: Bearer {token}
- Content-Type: application/json
- Request Body:
{
    "currentPassword": "password123",
    "newPassword": "newpassword123"
}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

4.4 회원 탈퇴
- URL: DELETE http://localhost:7100/api/members/me
- Authorization: Bearer {token}
- Response:
{
    "status": "success",
    "message": "SUCCESS",
    "data": null
}

================================================================================
5. POSTMAN 테스트 환경 설정
================================================================================

5.1 환경 변수 설정
- BASE_URL: http://localhost:7100
- TOKEN: (로그인 후 받은 JWT 토큰)

5.2 Authorization 설정
- Type: Bearer Token
- Token: {{TOKEN}}

5.3 테스트 순서
1. 회원가입 (POST {{BASE_URL}}/api/auth/register)
2. 로그인 (POST {{BASE_URL}}/api/auth/login) → TOKEN 저장
3. 스터디룸 생성 (POST {{BASE_URL}}/api/studies)
4. 스터디룸 상세 조회 (GET {{BASE_URL}}/api/studies/{studyRoomId})
5. 스터디 참가 신청 (POST {{BASE_URL}}/api/studies/{studyRoomId}/join)
6. 멤버 상태 업데이트 (PUT {{BASE_URL}}/api/studies/{studyRoomId}/members/{memberId}/status?status=APPROVED)
7. 메시지 전송 (POST {{BASE_URL}}/api/messages)
8. 채팅 히스토리 조회 (GET {{BASE_URL}}/api/messages/history/{roomId})

5.4 주요 변경사항 확인 포인트
✅ 스터디룸 상세 조회에서 memberNicknames 필드 확인
✅ 모든 응답에서 senderName, bossName, memberName 등 이름 필드 제거 확인
✅ 닉네임만 사용하여 사용자 식별 확인

================================================================================
6. 에러 응답 형식
================================================================================

6.1 일반적인 에러 응답
{
    "status": "error",
    "message": "ERROR_CODE",
    "data": null
}

6.2 주요 에러 코드
- AUTH_ERROR: 인증 실패
- STUDY_CREATE_ERROR: 스터디룸 생성 실패
- STUDY_GET_ERROR: 스터디룸 조회 실패
- JOIN_ERROR: 스터디 참가 실패
- MESSAGE_SAVE_ERROR: 메시지 저장 실패
- CHAT_HISTORY_ERROR: 채팅 히스토리 조회 실패

================================================================================
7. Socket Server 연동
================================================================================

7.1 Socket Server 연결
- URL: http://localhost:7500
- 인증: JWT 토큰을 auth 객체에 포함

7.2 주요 이벤트
- join-study: 스터디룸 참가
- send-message: 메시지 전송
- message-received: 메시지 수신
- user-joined: 사용자 참가
- user-left: 사용자 퇴장

================================================================================
                                    끝
================================================================================ 